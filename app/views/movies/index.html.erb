<p style="color: green"><%= notice %></p>

<h1 style="text-align: center; font-family: Arial, sans-serif; font-weight: bold;">Movies</h1>

<table id="moviesTable">
  <thead>
    <tr>
      <th class="sortable-header" data-colnum="1">Title</th>
      <th class="sortable-header" data-colnum="2">Rating</th>
      <th class="sortable-header" data-colnum="3">Release Date</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    <% @movies.each do |movie| %>
      <tr>
        <td><%= movie.title %></td>
        <td><%= movie.rating %></td>
        <td><%= movie.release_date %></td>
        <td><%= link_to "Show", movie %></td>
      </tr>
    <% end %>
  </tbody>
</table>

<%= link_to "New movie", new_movie_path %>

<style>
  .sorted-asc::after {
    content: " ▲";
  }

  .sorted-desc::after {
    content: " ▼";
  }

  /* Add additional styling elements */
  #moviesTable {
    border-collapse: collapse;
    width: 100%;
  }

  th, td {
    border: 1px solid #dddddd;
    text-align: left;
    padding: 8px;
  }

  body {
    font-family: Arial, sans-serif;
    background-color: beige;
  }

  th {
    background-color: #f2f2f2;
    cursor: pointer;
  }

  tr:nth-child(even) {
    background-color: #f2f2f2;
  }

  tr:hover {
    background-color: #ddd;
  }
  
  /* Highlight sorted column */
  .sorted-column {
    background-color: #e6e6e6;
  }
</style>

<script>
  var table = document.getElementById("moviesTable");
  var sortDirections = {}; // Object to store sorting direction for each column

  function compareValues(a, b) {
    return a.localeCompare(b); // Using localeCompare for string comparison
  }

  function sortTable(colnum) {
    let rows = Array.from(table.querySelectorAll(`tr`));
    rows = rows.slice(1);

    let qs = `td:nth-child(${colnum})`;

    rows.sort((r1, r2) => {
      let t1 = r1.querySelector(qs).textContent.trim();
      let t2 = r2.querySelector(qs).textContent.trim();
      return compareValues(t1, t2) * (sortDirections[colnum] === 'asc' ? 1 : -1);
    });

    rows.forEach(row => table.appendChild(row));
    sortDirections[colnum] = sortDirections[colnum] === 'asc' ? 'desc' : 'asc'; // Toggle sorting direction

    table.querySelectorAll('th.sortable-header').forEach(th => {
      th.classList.remove('sorted-asc', 'sorted-desc', 'sorted-column');
    });
    
    var clickedHeader = table.querySelector(`th[data-colnum="${colnum}"]`);
    clickedHeader.classList.add(sortDirections[colnum] === 'asc' ? 'sorted-asc' : 'sorted-desc');
    clickedHeader.classList.add('sorted-column'); // Highlight sorted column
  }

  table.querySelectorAll(`th.sortable-header`).forEach((th, position) => {
    sortDirections[position + 1] = 'asc'; // Initialize sorting direction for each column
    th.addEventListener(`click`, evt => sortTable(parseInt(th.getAttribute('data-colnum'))));
  });
</script>
